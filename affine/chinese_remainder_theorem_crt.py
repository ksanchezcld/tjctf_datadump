#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Author: john
# @Date:   2016-08-25 14:33:10
# @Last Modified by:   john
# @Last Modified time: 2016-12-31 19:57:07

from Crypto.Util.number import getPrime, inverse
import binascii
import primefac
import sympy
import itertools


#'''
e = 7
c1 = 25675152793958719362334087721727391668448541269558474462058064394972159237000883064745181284990149430303994650254840808322285864424764662750758365258432516187277728432545121586632979071929720717372649852913892333751596445815629910986053617473309414117281508303864323015909729484176490149898837722699148713920
n1 = 54820850259230535713865762084053568598874165594889130921566357696567616458378223857125838179921247755779292651871389981326670333442531734034645787606469134086461755105756873542385262892705242036071092223909243076301288478970799478306200287979706335286360412748167842364774735931863312933459243303887522528391
c2 = 57308013526198545787982553948831809099851386105071990727531071444194085081579444566800636703889823370213270842463375590828873179217670044197203168310866488084951374039873986096323030668989182846970273681633505685451818817121768616521795719540659814758454867045257226628730810691032850312088913937303862882122
n2 = 67042885520113263257118582290915177726312067469305908421847091179458757706749309299748971618010292667467149507645154486731380778917902476712952533653072795121865441967660602104613553639256754364241221379654359806670189462881506603085709273149985124690193140730266494965592337203461719611664879731308442667263
c3 = 33110523123312260880081423555385443012303698172724771306631372977777151188742699147449635911533782126548764489332497744201412222554852174681172644368277681280915180074419448681945399626487120057542603151103185868489294327151872456579497138539267121640657739423771314684090862694233758364464062279576183369864
n3 = 89985903111062000750924862108702084890290895192415633459163185350709370560849833696152316610647261365568603949891418963071575903453535955968749606939308123918445104540664601366419086133203411546299071992836870605114904775854946592687074623268960160934703771624447420985649938872471694356563590766730197327403
c4 = 77165065219653079862788577409129548279406192392832794127838745876446556297639145098957541474822063761739525311525724748975610206392909917884098887559908520069178582499123002341170033386358914463615518679156743215944833734844115997551919528578190653678286086414529205023645066772036171138071616232877775605403
n4 = 144578302659584152347777465183436595903641766254529841392977311918530263082334666488588492466964216842999000372858566667614430156791250833413367447725549300629307438383795112436448806559178858641149273056506193797949883101855228392777056665762363186560765549679621056726762476210940818128164542265216341911939
c5 = 46271592501512251239515544795747628191312494429121209907428975357753036096630585200765478229722279396220792499619124493513510693983433382775572503427829128432022799757398620804968227918699155484285929229454795772848632082074482660485353695038777422951895467676109703028615278915540633833992415540610914983525
n5 = 81790853226916934420573308748178318312510297162048844558315472184092957619321358751015078340781526837894903889782215325030254199582839010410447598969896414596873084948080977190437730775429382394893464902480690706275903017575378639142460124842161392405763583944706204061213376653979366112584588092058682099417
c6 = 57972675706457917594665689255141579755155126009393865090298137419620210832764812601374723742797175858601067071946998126997761266747079093136254796588168914305806501548651843044824561414391997008162345918166144951125302582440652239957438322070733320483325829334015651431547367283983778089203231241439641536053
n6 = 73980671682765133866918944940688116769134506866614012447817086969352897977409302191352722713709039627538976182650104228953961415306661290440291237838436045597491167374142468246641210294363030243026142729058264151545938090328689572424665075464153066787542386012683130559707032305120020753104044623180909126389
c7 = 74509805178973331475079616531075721234040785222421585008716026412829278145513552037640729538030768473876697345668551073431575270064366725987077833033222424840594603003480258191710744801632493056419255044343812108962552981039079556936296909043802657927151112869685008200474696033705827864953556606633891316209
n7 = 101172221238421792469887500553169614463346581090545073620543862634624608075572127513912303221239410360993953141778328809955385117874857059456679461625991923555648318729750420461377497354534152316919725646852519813952867617919442629999348382422210047284124959833853082144643826524296782324540575133270263491143
# '''

e=7

ns = [n1, n2, n3, n4, n5, n6, n7]
cs = [c1, c2, c3, c4, c5, c6, c7]

print ns
for p in itertools.permutations(ns, 2):
    print sympy.gcd(p[0],p[1])

# exit()



# n1=125750343059819390167143938983659898712354226589462092309773977843044922799914756939082880562931625053596794427264595982969166805557483747564791913809877941176752838535748115045374812289314564150897522705076556672330095489232867911471912403806292156276900954495404913712201295456322795121011064432956645624383
# n2=132760059702185692133230981906634616217414979171769929646882237666300110928908432756184378099548851419508086004518665279586499790163780933700937789837556409179593552418939012052924202478160422204320686576926075429445088926640057119871699038883999582580164837127476128356551798980919813051785952813585856372361
# n3=131140137481197070907053908750262250386810754494273098648882444376281267031992592743867740534974694565456213881403154903135144615759649537270471000562770145205216164111703207026289378071826499054276680327727171381076318685243469278282041138749724070884443210100036784585739696931149788493153209601615966231707

# C1 = M^e mod N1 to B1,
# C2 = M^e mod N2 to B2,
# C3 = M^e mod N3 to B3.

# c1=116653335651587823196114833617132219086045540982271758459617035249416778213851562544362775411945827248185543490203479374782456371759446524407131124185526014477539161717914496492253270201387108945708675667482888479979096584843437356814521765010989182426671435420048496318640038125585318127575215673198376823278
# c2=87885241603755211180695551676285937928287296999994126219848534281140021526426886813781156673182876106006160323348122915152391138996774168085620227929092838508162644619379402560897604783741509546732482546375263775001330363144447388167684727273059350278633525251194269020857090614459686820726108290522238655339
# c3=65868694452074433591683219931244875370320213264741004375291752393398638581862305400217905492813520841728789412044314458243007052662490078340976293300106110433313251814818497008867499581678197077814296422593728194362412764822187308222603829531267368086760986795942051088567526462347844756206440148833062274273 


# m1 = pow(c1, d1, n1)
# m2 = pow(c2, d2, n2)
# m3 = pow(c3, d3, n3)


# For the CRT, x = m^e.
# all we need to fnd is x.
# m = pow(sympy.E,  sympy.log(x) / e )


# This function was stolen online...
# https://asecuritysite.com/encryption/crackrsa3
def chinese_remainder(n, a):
    sum = 0
    prod = reduce(lambda a, b: a*b, n)
 
    for n_i, a_i in zip(n, a):
        p = prod / n_i
        #sum += a_i * mul_inv(p, n_i) * p
        sum += a_i * inverse(p, n_i) * p
    return sum % prod
 




# initial test:
# all of the n's must have a gcd of 1 for CRT to work!
# print sympy.gcd(n1,n2), sympy.gcd(n1,n3), sympy.gcd(n3,n2)

# three sections of the plaintext
# x =  n1 + n2 + n3

# for the first section, we can think...
# x = n1 +  n1 + n1

# for the second section, we can think...
# x = n2 +  n1 + (n1*n2)

# for the third section, we can think...
# x = n2*n3 +  n1*n3 + (n1*n2)



# x = chinese_remainder([n1, n2, n3], [c1, c2, c3])
x = chinese_remainder(ns, cs)
print x 
m = pow(sympy.E,  sympy.log(x) / e )

print hex(int(m))[2:-1].decode('hex')